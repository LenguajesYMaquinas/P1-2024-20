/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
		" "
	|	"\r"
	|	"\t"
	| 	"\n"
}

TOKEN:
{
  // COMMANDS

		< MOVE:			"move" >
	| 	< RIGHT: 		"right" >
	| 	< PUT: 			"put" >
	| 	< PICK: 		"pick" >
	| 	< POP: 			"pop" >
	|  	< GO: 			"go" >
    |  	< HOP:  		"hop" >
    |   < TURN_TO_MY:	"turntomy" >
    |   < TURN_TO_THE:	"turntothe" >
    |   < WALK:			"walk" >
    |   < JUMP:			"jump" >
    |   < DROP:			"drop" >
    |   < GRAB:			"grab" >
    |   < LET_GO:		"letgo" >
    |   < MOVES:		"moves" >
    |	<NOP: 			"nop"  >
    |	<SAFE_EXE: 		"safeexe"  >
}

TOKEN:
{
  // DIRECTIONS

		< LEFT:			"left" >
	| 	< BACK: 		"back" >
	| 	< NORTH:		"north" >
	| 	< SOUTH: 		"south" >
	| 	< EAST: 		"east" >
	|  	< WEST: 		"west" >
	|   < FORWARD:		"forward" >
	|   < BACKWARDS:	"backwards" >
}

TOKEN:
{
  // VALUES

		< SIZE:				"size" >
	| 	< MY_X: 			"myx" >
	| 	< MY_Y:				"myy" >
	| 	< MY_CHIPS: 		"mychips" >
	| 	< MY_BALLOONS: 		"myballoons" >
	|  	< BALLOONS_HERE:	"balloonshere" >
	|   < CHIPS_HERE:		"chipshere" >
	|   < ROOM_FOR_CHIPS:	"roomforchips" >
}

TOKEN:
{
  // DEFINITIONS
  
		<EXEC:	"exec" >
	|	<NEW: 	"new"  >
	|	<VAR: 	"var"  >
	|	<MACRO:	"macro"  >

}

TOKEN:
{
  // CONTROL STRUCTURES
  
		<IF:	"if" >
	|	<THEN: 	"then"  >
	|	<ELSE: 	"else"  >
	|	<FI:	"fi"  >
	|	<DO:	"do"  >
	|	<OD:	"od"  >
	|	<REP:	"rep"  >
	|	<PER:	"per"  >

}

TOKEN:
{
  // CONDITIONS
  
		<IS_BLOCKED:	"isblocked?" >
	|	<IS_FACING: 	"isfacing?"  >
	|	<ZERO: 			"zero?"  >
	|	<NOT:			"not"  >

}

TOKEN:
{
  // OBJECTS
		<BALLOONS:  "balloons" >
	|	<CHIPS:     "chips"  >	

}

TOKEN:
{
  // SYMBOLS

		< LEFT_PARENTEHSIS:  	"(" >
	| 	< RIGHT_PARENTEHSIS:	")" >
	| 	< UNDERSCORE:  			"_" >
	|	<COMMA:					","  >
	|	<LEFT_BRACE: 			"{"  >
	|	<RIGHT_BRACE: 			"}"  >
	| 	< N: 					(< DIGIT >)+ >
	|  	< #DIGIT: 				["0"-"9"] >
	| 	< NAME: 				< CHARACTER >(< CHARACTER > | < UNDERSCORE > | < DIGIT >)*>
	| 	< #CHARACTER: 			["a"-"z"] >

}

//boolean command(uniandes.lym.robot.view.Console sistema) :
boolean command(Console sistema):
{	
	
	int x,y;
	salida=new String();	
}


{
	(
		input()

	{
		try {
					Thread.sleep(900);
			} catch (InterruptedException e) {
						System.err.format("IOException: %s%n", e);
				}
					
		sistema.printOutput(salida);
		return true;
	})

	| <EOF> {return false;} 
}

void input(): {
} {
  < IS_BLOCKED > < IS_BLOCKED > 
}

// ------------------------------------------

void put() :
{
	int f=1;	
}
{
	( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
	|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

}

void get() :
{
	int f=1;	
}
{
	( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
	|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

}




/**
	* Unsigned decimal number
	* @return the corresponding value of the string
	* @error  corresponding value is too large
	*/

int num() throws Error:
{	
	int total=1;
}
{
	<N>
	{
		try 
		{
			total = Integer.parseInt(token.image);
		} 
		catch (NumberFormatException ee) 
		{
			throw new Error("Number out of bounds: "+token.image+" !!");
		}
		return total;
	}
}

