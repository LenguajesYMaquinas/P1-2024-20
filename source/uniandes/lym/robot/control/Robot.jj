options 
{
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
}
PARSER_BEGIN(Robot)
package uniandes.lym.robot.control;
import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
import java.awt.Point;
import java.util.HashMap;
import java.util.Map;
import java.io.*;
import java.lang.String;
import java.lang.Integer;
import java.util.Vector;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
SKIP: {" " | "\r" | "\t" | "\n" }
TOKEN:
{
	  	< DIGITO: 				["0"-"9"] >
	| 	< CARACTER: 			["a"-"z"] >
}




int main(): {} {(executionCommand() | definition())+ { return 1; }}
void executionCommand(): {} {"exec" { Robot.inExecutionBlock = true; } B() { Robot.inExecutionBlock = false; }}
void definition(): {} {"new" (varDefinition() | macroDefinition())}
void varDefinition(): {String variableName;int variableValue;} {"var" ((< CARACTER >)+ (< DIGITO >)*) { variableName = token.image.toLowerCase();} "=" variableValue=n(true) {if(!Robot.variablesForLevel.containsKey(Robot.currentLevel)) {Map<String, Integer> internalMap = new HashMap<>();Robot.variablesForLevel.put(Robot.currentLevel, internalMap);}Map<String, Integer> internalMap = Robot.variablesForLevel.get(Robot.currentLevel);if(internalMap.containsKey(variableName)) {throw new Error("Ya fue declarada una variable con este nombre");}else {internalMap.put(variableName, variableValue);Robot.variablesForLevel.put(Robot.currentLevel, internalMap);}}}
void macroDefinition(): {} {"macro" { Robot.inMacroDefinition = true; } ((< CARACTER >)+ (< DIGITO >)*) {if(Robot.macroParametersQuantity.containsKey(token.image.toLowerCase())) throw new Error("Este nombre para macrp ya esta en uso");Robot.currentMacroNameInMacroDefinition = token.image.toLowerCase();} "(" params() ")" { Robot.inMacroDefinition = false; Robot.currentMacroNameInMacroDefinition = null; }  B() { Robot.currentMacroParameters = new ArrayList<String>(); }}
Integer n(boolean inVariableDefinition): {int constantValue;int valueInVariable = 0;} { (< DIGITO >)+ {if(inVariableDefinition) return Integer.parseInt(token.image.toLowerCase());else if(Robot.inVariableAssignment) return Integer.parseInt(token.image.toLowerCase());else if(Robot.inMacroDefinition) throw new Error("Solo se permiten nombres de variables como parametros");else if(Robot.receivingMacroParameters) {Robot.macroParametersQuantity.put(Robot.currentMacroNameRecievingParameters, Robot.macroParametersQuantity.get(Robot.currentMacroNameRecievingParameters)-1);return Integer.parseInt(token.image.toLowerCase());}else if(Robot.inExecutionBlock) return Integer.parseInt(token.image.toLowerCase());return -1;}| 	((< CARACTER >)+ (< DIGITO >)*) {String variableName = token.image.toLowerCase();boolean found = false;if(inVariableDefinition) {for(int i = Robot.currentLevel; i>=0; i--) {Map<String, Integer> variablesInCurrentLevel = Robot.variablesForLevel.get(i);if(variablesInCurrentLevel != null && variablesInCurrentLevel.containsKey(variableName)) {found = true;valueInVariable = variablesInCurrentLevel.get(variableName);}}if(found) return valueInVariable;else throw new Error("La variable no ha sido declarada antes"); }else if(Robot.inVariableAssignment) {for(int i = Robot.currentLevel; i>=0; i--) {Map<String, Integer> variablesInCurrentLevel = Robot.variablesForLevel.get(i);if(variablesInCurrentLevel != null && variablesInCurrentLevel.containsKey(variableName)) {found = true;valueInVariable = variablesInCurrentLevel.get(variableName);}}boolean foundInMacroParameters = false;for(String element: Robot.currentMacroParameters) {if (element.equals(variableName)) {foundInMacroParameters = true;}}if(found || foundInMacroParameters) return valueInVariable;else throw new Error("La variable no ha sido declarada antes");}else if(Robot.inMacroDefinition) {if(!Robot.currentMacroParameters.contains(token.image.toLowerCase())) {if(macroParametersQuantity.containsKey(Robot.currentMacroNameInMacroDefinition))	Robot.macroParametersQuantity.put(Robot.currentMacroNameInMacroDefinition, Robot.macroParametersQuantity.get(Robot.currentMacroNameInMacroDefinition)+1);else Robot.macroParametersQuantity.put(Robot.currentMacroNameInMacroDefinition, 1);Robot.currentMacroParameters.add(token.image.toLowerCase());}else throw new Error("No pueden haber parametros duplicados");}else if(Robot.receivingMacroParameters) {for(int i = Robot.currentLevel; i>=0; i--) {Map<String, Integer> variablesInCurrentLevel = Robot.variablesForLevel.get(i);if(variablesInCurrentLevel != null && variablesInCurrentLevel.containsKey(variableName)) {found = true;valueInVariable = variablesInCurrentLevel.get(variableName);}}boolean foundInMacroParameters = false;for(String element: Robot.currentMacroParameters) {if (element.equals(variableName)) {foundInMacroParameters = true;}}if(found || foundInMacroParameters) {Robot.macroParametersQuantity.put(Robot.currentMacroNameRecievingParameters, Robot.macroParametersQuantity.get(Robot.currentMacroNameRecievingParameters)-1);return valueInVariable;}else throw new Error("El parametro usado no fue declarado antes");}else if(Robot.inExecutionBlock) {for(int i = Robot.currentLevel; i>=0; i--) {Map<String, Integer> variablesInCurrentLevel = Robot.variablesForLevel.get(i);if(variablesInCurrentLevel != null && variablesInCurrentLevel.containsKey(variableName)) {found = true;valueInVariable = variablesInCurrentLevel.get(variableName);}}if(found) return valueInVariable;else throw new Error("La variable no ha sido declarada");} return -1;}|constantValue=constant() {if(inVariableDefinition) return constantValue;else if(Robot.inVariableAssignment) return constantValue;else if(Robot.inMacroDefinition) throw new Error("Solo se permiten nombres de variables como parametros");else if(Robot.receivingMacroParameters) {Robot.macroParametersQuantity.put(Robot.currentMacroNameRecievingParameters, Robot.macroParametersQuantity.get(Robot.currentMacroNameRecievingParameters)-1);return constantValue;}else if(Robot.inExecutionBlock) return constantValue;return -1;}}
int constant(): {} {"size" { return robotWorld.getN();}| 	"myx" { return (int) robotWorld.getPosition().getX(); }| 	"myy" { return (int) robotWorld.getPosition().getY(); }| 	"mychips" { return robotWorld.getMyChips();}| 	"myballoons" { return robotWorld.getMyBalloons();}|  	"balloonshere" { return robotWorld.countBalloons();}|   "chipshere" { return robotWorld.chipsToPick();}|   "roomforchips" { return robotWorld.getMyChips();}}
void params(): {} {(n(false) ("," n(false))*)?}
void B(): {} {"{" { Robot.currentLevel++;} (instruction() ";")+ "}" { Robot.currentLevel--; }}
void BREP(Integer value): {} {"{" { Robot.currentLevel++;} (instructionREP(value) ";")+ "}" { Robot.currentLevel--; }}
void instruction(): {} {commandGroup(1) | controlStructure(1)}
void instructionREP(Integer value): {} {commandGroup(value) | controlStructure(value)}
void commandGroup(Integer value): {} {move(value)|	right(value)| 	put(value)| 	pick(value)| 	pop(value)| 	hop(value)| 	go(value)| 	assignmentOrMacroInvocation()| 	turnToMy(value)| 	turnToThe(value)| 	walk(value)| 	jump(value)| 	drop(value)| 	grab(value)| 	letGo(value)| 	moves(value)|  "nop"| 	safeExe(value)}
boolean command(Console sistema):{int x,y;salida=new String();}{(x=main() { try { Thread.sleep(900);} catch (InterruptedException e) {System.err.format("IOException: %s%n", e);} if (x==1) salida= "El programa es correcto!"; sistema.printOutput(salida);Robot.variablesForLevel = new HashMap<>();Robot.currentLevel = 0;Robot.currentMacroParameters = new ArrayList<String>();Robot.inMacroDefinition = false;Robot.macroParametersQuantity = new HashMap<>();Robot.currentMacroNameInMacroDefinition = new String();Robot.receivingMacroParameters = false;Robot.inVariableAssignment = false;Robot.currentMacroNameRecievingParameters = new String();Robot.inExecutionBlock = false;Robot.inSafeExe = false;Robot.conditionResults = new ArrayList<>(Arrays.asList(true));return true;})| <EOF> {return false;} }
void move(Integer value): {int steps;int i;} {"move" "(" steps=n(false) ")" { for (i=0; i<value; i++) {  if(Robot.inExecutionBlock && Robot.conditionResults.get(Robot.conditionResults.size()-1) ) robotWorld.moveForward(steps, false); } } }
void right(Integer value): {int i;} {"right" "(" ")" { for (i=0; i<value; i++) {  if(Robot.inExecutionBlock && Robot.conditionResults.get(Robot.conditionResults.size()-1)) robotWorld.turnRight(); } }}
void put(Integer value): {int amount;String objectt;int i;} {"put" "(" objectt=object() "," amount=n(false) ")" { for (i=0; i<value; i++) { if(Robot.inExecutionBlock && Robot.conditionResults.get(Robot.conditionResults.size()-1)) { if(objectt.equals("balloons")) robotWorld.putBalloons(amount);else robotWorld.putChips(amount); }}}}
void pick(Integer value): {int amount;String objectt;int i;} {"pick" "(" ((objectt=object() "," amount=n(false)) { for (i=0; i<value; i++) { if(Robot.inExecutionBlock && Robot.conditionResults.get(Robot.conditionResults.size()-1)) {if(Robot.inSafeExe) { try {if(objectt.equals("balloons")) robotWorld.grabBalloons(amount);else robotWorld.pickChips(amount);}catch(Error e) { }} else {if(objectt.equals("balloons")) robotWorld.grabBalloons(amount);else robotWorld.pickChips(amount);}}} }  | amount=n(false) { for (i=0; i<value; i++) { if(Robot.inExecutionBlock) {if(Robot.inSafeExe) { try { robotWorld.pickChips(amount); }catch(Error e) { }} else {robotWorld.pickChips(amount);}}} } ) ")" }
void pop(Integer value): {int amount;int i;} {"pop" "(" amount=n(false) ")" { for (i=0; i<value; i++) { if(Robot.inExecutionBlock && Robot.conditionResults.get(Robot.conditionResults.size()-1)) {if(Robot.inSafeExe) { try { robotWorld.popBalloons(amount); }catch(Error e) { }} else {robotWorld.popBalloons(amount);}}}}}
void hop(Integer value): {int amount;int i;} {"hop" "(" amount=n(false) ")" { for (i=0; i<value; i++) { if(Robot.inExecutionBlock && Robot.conditionResults.get(Robot.conditionResults.size()-1)) robotWorld.moveForward(amount, true); } }}
void go(Integer value): {int x;int y;int i;} {"go" "(" x=n(false) "," y=n(false) ")" { for (i=0; i<value; i++) {  if(Robot.inExecutionBlock && Robot.conditionResults.get(Robot.conditionResults.size()-1)) robotWorld.setPostion(x,y); } }}
String object(): {}{("chips" | "balloons") { return token.image.toLowerCase();}}
void assignmentOrMacroInvocation(): {String macroName;int i;} {((< CARACTER >)+ (< DIGITO >)*) { macroName = token.image.toLowerCase(); } (assignment(macroName) | macroInvocation(macroName))}
void assignment(String assignedVariableName): {int newValue;} {"=" { Robot.inVariableAssignment = true; } newValue=n(false) {Robot.inVariableAssignment = false;boolean succesfullAssignment = false;if(Robot.inExecutionBlock && Robot.conditionResults.get(Robot.conditionResults.size()-1)) {for(int i = Robot.currentLevel; i>=0; i--) {Map<String, Integer> variablesInCurrentLevel = Robot.variablesForLevel.get(i);if(variablesInCurrentLevel != null && variablesInCurrentLevel.containsKey(assignedVariableName)) {variablesInCurrentLevel.put(assignedVariableName, newValue);Robot.variablesForLevel.put(i, variablesInCurrentLevel);succesfullAssignment = true;}}if(!succesfullAssignment) throw new Error("La variable no fue declarada antes");}}}
void macroInvocation(String macroName): {int initialParameters = 0;int i;} {"(" {Robot.receivingMacroParameters=true;Robot.currentMacroNameRecievingParameters = macroName;if(Robot.macroParametersQuantity.containsKey(Robot.currentMacroNameRecievingParameters)) initialParameters = Robot.macroParametersQuantity.get(Robot.currentMacroNameRecievingParameters);else throw new Error("Ya hay una macro definida con este nombre");} params() ")" {if(Robot.macroParametersQuantity.containsKey(Robot.currentMacroNameRecievingParameters) && Robot.macroParametersQuantity.get(Robot.currentMacroNameRecievingParameters) != 0) throw new Error("La macroe esperaba una cantidad distinta de agumentos a los que recibio");if(Robot.macroParametersQuantity.containsKey(Robot.currentMacroNameRecievingParameters)) Robot.macroParametersQuantity.put(Robot.currentMacroNameRecievingParameters, initialParameters);Robot.receivingMacroParameters=false;Robot.currentMacroNameRecievingParameters = null;}}
void turnToMy(Integer value): {String direction;int i;} {"turntomy" "(" ("left" | "right" | "back") { direction = token.image.toLowerCase(); } ")" { for (i=0; i<value; i++) { if(Robot.inExecutionBlock && Robot.conditionResults.get(Robot.conditionResults.size()-1)) {if(direction.equals("right")) { robotWorld.turnRight(); }else if(direction.equals("back")) { robotWorld.turnRight(); robotWorld.turnRight(); }else if(direction.equals("left")) { robotWorld.turnRight(); robotWorld.turnRight(); robotWorld.turnRight(); }}}}}
void turnToThe(Integer value): {String coordinate;int coordinateNumber = 0;int i;} {"turntothe" "(" ("north" | "south" | "east" | "west") {for (i=0; i<value; i++) { coordinate = token.image.toLowerCase();if(coordinate.equals("north")) coordinateNumber = 0;else if(coordinate.equals("south")) coordinateNumber = 1;else if(coordinate.equals("east")) coordinateNumber = 2;else if(coordinate.equals("west")) coordinateNumber = 3;}} ")" { for (i=0; i<value; i++) { for (i=0; i<value; i++) { if(Robot.inExecutionBlock && Robot.conditionResults.get(Robot.conditionResults.size()-1)) { int actualFacing = robotWorld.getFacing();int timesOfTurnRight = 0;if(actualFacing == 0 && coordinateNumber == 1) timesOfTurnRight = 2;else if(actualFacing == 2 && coordinateNumber == 1) timesOfTurnRight = 1;else if(actualFacing == 3 && coordinateNumber == 1) timesOfTurnRight = 3;else if(actualFacing == 0 && coordinateNumber == 2) timesOfTurnRight = 1;else if(actualFacing == 3 && coordinateNumber == 2) timesOfTurnRight = 2;else if(actualFacing == 1 && coordinateNumber == 2) timesOfTurnRight = 3;else if(actualFacing == 0 && coordinateNumber == 3) timesOfTurnRight = 3;else if(actualFacing == 1 && coordinateNumber == 3) timesOfTurnRight = 1;else if(actualFacing == 2 && coordinateNumber == 3) timesOfTurnRight = 2;else if(actualFacing == 1 && coordinateNumber == 0) timesOfTurnRight = 2;else if(actualFacing == 2 && coordinateNumber == 0) timesOfTurnRight = 3;else if(actualFacing == 3 && coordinateNumber == 0) timesOfTurnRight = 1;for(int e=0;e<timesOfTurnRight;e++) robotWorld.turnRight();}}}}}
void walk(Integer value): {int steps;int i;} {"walk" "(" steps=n(false) ")" { for (i=0; i<value; i++) { if(Robot.inExecutionBlock && Robot.conditionResults.get(Robot.conditionResults.size()-1)) {if(Robot.inSafeExe) { try { robotWorld.moveForward(steps, false); }catch(Error e) { }} else {robotWorld.moveForward(steps, false);}}}}}
void jump(Integer value): {int steps;int i;} {"jump" "(" steps=n(false) ")" { for (i=0; i<value; i++) { if(Robot.inExecutionBlock && Robot.conditionResults.get(Robot.conditionResults.size()-1)) {if(Robot.inSafeExe) { try { robotWorld.moveForward(steps, true); }catch(Error e) { }} else {robotWorld.moveForward(steps, true);}}}}}
void drop(Integer value): {int amount;int i;} {"drop" "(" amount=n(false) ")" { for (int i=0; i<value; i++) { if(Robot.inExecutionBlock && Robot.conditionResults.get(Robot.conditionResults.size()-1)) {if(Robot.inSafeExe) { try { robotWorld.putChips(amount); }catch(Error e) { }} else {robotWorld.putChips(amount);}}}}}
void grab(Integer value): {int amount;int i;} {"grab" "(" amount=n(false) ")" { for (i=0; i<value; i++) { if(Robot.inExecutionBlock && Robot.conditionResults.get(Robot.conditionResults.size()-1)) {if(Robot.inSafeExe) { try { robotWorld.grabBalloons(amount); }catch(Error e) { }} else {robotWorld.grabBalloons(amount);}}}}}
void letGo(Integer value): {int amount;int i;} {"letgo" "(" amount=n(false) ")" { for (i=0; i<value; i++) { if(Robot.inExecutionBlock && Robot.conditionResults.get(Robot.conditionResults.size()-1)) {if(Robot.inSafeExe) { try { robotWorld.putBalloons(amount); }catch(Error e) { }} else {robotWorld.putBalloons(amount);}}}}}
void moves(Integer value): {String direction;int initialCoordinate;int i;} {"moves" { initialCoordinate = robotWorld.getFacing(); } "(" ("forward" | "right" | "left" | "backwards") {for (i=0; i<value; i++) { if(Robot.inExecutionBlock && Robot.conditionResults.get(Robot.conditionResults.size()-1)) { direction = token.image.toLowerCase();if(direction.equals("forward")) robotWorld.moveForward(1, false);else if(direction.equals("right")) { robotWorld.turnRight(); robotWorld.moveForward(1, false); }else if(direction.equals("backwards")) { robotWorld.turnRight(); robotWorld.turnRight(); robotWorld.moveForward(1, false); }else if(direction.equals("left")) { robotWorld.turnRight(); robotWorld.turnRight(); robotWorld.turnRight(); robotWorld.turnRight(); robotWorld.moveForward(1, false); }} }} ("," ("forward" | "right" | "left" | "backwards"){ for (i=0; i<value; i++) { if(Robot.inExecutionBlock) {  direction = token.image.toLowerCase();if(direction.equals("forward")) robotWorld.moveForward(1, false);else if(direction.equals("right")) { robotWorld.turnRight(); robotWorld.moveForward(1, false); }else if(direction.equals("backwards")) { robotWorld.turnRight(); robotWorld.turnRight(); robotWorld.moveForward(1, false); }else if(direction.equals("left")) { robotWorld.turnRight(); robotWorld.turnRight(); robotWorld.turnRight(); robotWorld.turnRight(); robotWorld.moveForward(1, false); }} }})* ")" {for (i=0; i<value; i++) { if(Robot.inExecutionBlock) { int actualFacing = robotWorld.getFacing();int timesOfTurnRight = 0;if(actualFacing == 0 && initialCoordinate == 1) timesOfTurnRight = 2;else if(actualFacing == 2 && initialCoordinate == 1) timesOfTurnRight = 1;else if(actualFacing == 3 && initialCoordinate == 1) timesOfTurnRight = 3;else if(actualFacing == 0 && initialCoordinate == 2) timesOfTurnRight = 1;else if(actualFacing == 3 && initialCoordinate == 2) timesOfTurnRight = 2;else if(actualFacing == 1 && initialCoordinate == 2) timesOfTurnRight = 3;else if(actualFacing == 0 && initialCoordinate == 3) timesOfTurnRight = 3;else if(actualFacing == 1 && initialCoordinate == 3) timesOfTurnRight = 1;else if(actualFacing == 2 && initialCoordinate == 3) timesOfTurnRight = 2;else if(actualFacing == 1 && initialCoordinate == 0) timesOfTurnRight = 2;else if(actualFacing == 2 && initialCoordinate == 0) timesOfTurnRight = 3;else if(actualFacing == 3 && initialCoordinate == 0) timesOfTurnRight = 1;for(int e=0;e<timesOfTurnRight;e++) robotWorld.turnRight();}} }}
void safeExe(Integer value): {} {"safeexe" { Robot.inSafeExe = true; } "(" (walk(value) | jump(value) | drop(value) | pick(value) | grab(value) | letGo(value) | pop(value)) ")" { Robot.inSafeExe = false; }}
void controlStructure(Integer value): {} {iff(value) | doo(value) | rep(value)}
void iff(Integer value): {boolean conditionResult = false;} {"if" "(" conditionResult=condition() { Robot.conditionResults.add(conditionResult); } ")" "then" B() "else" { Robot.conditionResults.remove(Robot.conditionResults.size()-1); Robot.conditionResults.add(!conditionResult); } B() "fi" { Robot.conditionResults.remove(Robot.conditionResults.size()-1); }}
void doo(Integer value): {} {"do" "(" condition() ")" B() "od"}
void rep(Integer value):{Integer result = 0;} {"rep" result=n(false) "times"  BREP(value) "per"}
boolean condition(): {boolean result = false;} {result=isBlocked() { return result; } | result=isFacing() { return result; } | result=zero() { return result; } | result=not()	{ return result; }	}
boolean isBlocked(): {boolean result = false;} {"isblocked?" "(" ("left" {if(Robot.inExecutionBlock) {int x = (int)robotWorld.getPosition().getX();int y = (int)robotWorld.getPosition().getY();if (robotWorld.isBlocked(new Point(x-1, y)) || robotWorld.isLeft()) result=true;else result=false;}}|"right" {if(Robot.inExecutionBlock) {int x = (int)robotWorld.getPosition().getX();int y = (int)robotWorld.getPosition().getY();if (robotWorld.isBlocked(new Point(x+1, y)) || robotWorld.isRight()) result=true;else result=false;}} | "front" {if(Robot.inExecutionBlock) {int x = (int)robotWorld.getPosition().getX();int y = (int)robotWorld.getPosition().getY();if (robotWorld.isBlocked(new Point(x, y+1)) || robotWorld.isUp()) result=true;else result=false;}} | "back"{if(Robot.inExecutionBlock) {int x = (int)robotWorld.getPosition().getX();int y = (int)robotWorld.getPosition().getY();if (robotWorld.isBlocked(new Point(x, y-1)) || robotWorld.isDown()) result=true;else result=false;}}) ")" { return result; }}
boolean isFacing(): {boolean result = false;} {"isfacing?" "(" ("north" { result = robotWorld.facingNorth(); } | "south" { result = robotWorld.facingSouth(); } | "east" { result = robotWorld.facingEast(); } | "west" { result = robotWorld.facingWest(); }) ")" { return result; }}
boolean zero(): {int value;}{"zero?" "(" value=n(false) ")" { return value==0; }}
boolean not(): {boolean result = false;} {"not" "(" result=condition() ")" { return !result;}}
@SuppressWarnings("serial")
public class Robot 
{private RobotWorldDec robotWorld; public static Map<Integer, Map<String, Integer>> variablesForLevel = new HashMap<>(); public static int currentLevel = 0; public static ArrayList<String> currentMacroParameters = new ArrayList<String>(); public static boolean inMacroDefinition = false; public static Map<String, Integer> macroParametersQuantity = new HashMap<>(); public static String currentMacroNameInMacroDefinition; public static boolean receivingMacroParameters = false; public static boolean inVariableAssignment = false; public static String currentMacroNameRecievingParameters; public static boolean inExecutionBlock = false; public static boolean inSafeExe = false; public static ArrayList<Boolean> conditionResults = new ArrayList<>(Arrays.asList(true));void setWorld(RobotWorld w) { robotWorld = (RobotWorldDec) w;}String salida=new String();}
PARSER_END(Robot)
